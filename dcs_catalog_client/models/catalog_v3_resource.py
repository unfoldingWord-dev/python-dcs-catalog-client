# coding: utf-8

"""
    Catalog Next API.

    This documentation describes the Catalog Next API for all versions and other miscellaneous endpoints.  # noqa: E501

    OpenAPI spec version: 1.16.8+dcs
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dcs_catalog_client.configuration import Configuration


class CatalogV3Resource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'checking': 'object',
        'comment': 'str',
        'contributor': 'object',
        'creator': 'str',
        'description': 'str',
        'formats': 'object',
        'identifier': 'str',
        'issued': 'datetime',
        'modified': 'datetime',
        'owner': 'str',
        'projects': 'object',
        'publisher': 'str',
        'relation': 'object',
        'repo': 'str',
        'rights': 'str',
        'source': 'list[object]',
        'subject': 'str',
        'title': 'str',
        'version': 'str'
    }

    attribute_map = {
        'checking': 'checking',
        'comment': 'comment',
        'contributor': 'contributor',
        'creator': 'creator',
        'description': 'description',
        'formats': 'formats',
        'identifier': 'identifier',
        'issued': 'issued',
        'modified': 'modified',
        'owner': 'owner',
        'projects': 'projects',
        'publisher': 'publisher',
        'relation': 'relation',
        'repo': 'repo',
        'rights': 'rights',
        'source': 'source',
        'subject': 'subject',
        'title': 'title',
        'version': 'version'
    }

    def __init__(self, checking=None, comment=None, contributor=None, creator=None, description=None, formats=None, identifier=None, issued=None, modified=None, owner=None, projects=None, publisher=None, relation=None, repo=None, rights=None, source=None, subject=None, title=None, version=None, _configuration=None):  # noqa: E501
        """CatalogV3Resource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._checking = None
        self._comment = None
        self._contributor = None
        self._creator = None
        self._description = None
        self._formats = None
        self._identifier = None
        self._issued = None
        self._modified = None
        self._owner = None
        self._projects = None
        self._publisher = None
        self._relation = None
        self._repo = None
        self._rights = None
        self._source = None
        self._subject = None
        self._title = None
        self._version = None
        self.discriminator = None

        if checking is not None:
            self.checking = checking
        if comment is not None:
            self.comment = comment
        if contributor is not None:
            self.contributor = contributor
        if creator is not None:
            self.creator = creator
        if description is not None:
            self.description = description
        if formats is not None:
            self.formats = formats
        if identifier is not None:
            self.identifier = identifier
        if issued is not None:
            self.issued = issued
        if modified is not None:
            self.modified = modified
        if owner is not None:
            self.owner = owner
        if projects is not None:
            self.projects = projects
        if publisher is not None:
            self.publisher = publisher
        if relation is not None:
            self.relation = relation
        if repo is not None:
            self.repo = repo
        if rights is not None:
            self.rights = rights
        if source is not None:
            self.source = source
        if subject is not None:
            self.subject = subject
        if title is not None:
            self.title = title
        if version is not None:
            self.version = version

    @property
    def checking(self):
        """Gets the checking of this CatalogV3Resource.  # noqa: E501


        :return: The checking of this CatalogV3Resource.  # noqa: E501
        :rtype: object
        """
        return self._checking

    @checking.setter
    def checking(self, checking):
        """Sets the checking of this CatalogV3Resource.


        :param checking: The checking of this CatalogV3Resource.  # noqa: E501
        :type: object
        """

        self._checking = checking

    @property
    def comment(self):
        """Gets the comment of this CatalogV3Resource.  # noqa: E501


        :return: The comment of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CatalogV3Resource.


        :param comment: The comment of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def contributor(self):
        """Gets the contributor of this CatalogV3Resource.  # noqa: E501


        :return: The contributor of this CatalogV3Resource.  # noqa: E501
        :rtype: object
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this CatalogV3Resource.


        :param contributor: The contributor of this CatalogV3Resource.  # noqa: E501
        :type: object
        """

        self._contributor = contributor

    @property
    def creator(self):
        """Gets the creator of this CatalogV3Resource.  # noqa: E501


        :return: The creator of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this CatalogV3Resource.


        :param creator: The creator of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this CatalogV3Resource.  # noqa: E501


        :return: The description of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogV3Resource.


        :param description: The description of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def formats(self):
        """Gets the formats of this CatalogV3Resource.  # noqa: E501


        :return: The formats of this CatalogV3Resource.  # noqa: E501
        :rtype: object
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this CatalogV3Resource.


        :param formats: The formats of this CatalogV3Resource.  # noqa: E501
        :type: object
        """

        self._formats = formats

    @property
    def identifier(self):
        """Gets the identifier of this CatalogV3Resource.  # noqa: E501


        :return: The identifier of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this CatalogV3Resource.


        :param identifier: The identifier of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def issued(self):
        """Gets the issued of this CatalogV3Resource.  # noqa: E501


        :return: The issued of this CatalogV3Resource.  # noqa: E501
        :rtype: datetime
        """
        return self._issued

    @issued.setter
    def issued(self, issued):
        """Sets the issued of this CatalogV3Resource.


        :param issued: The issued of this CatalogV3Resource.  # noqa: E501
        :type: datetime
        """

        self._issued = issued

    @property
    def modified(self):
        """Gets the modified of this CatalogV3Resource.  # noqa: E501


        :return: The modified of this CatalogV3Resource.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this CatalogV3Resource.


        :param modified: The modified of this CatalogV3Resource.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def owner(self):
        """Gets the owner of this CatalogV3Resource.  # noqa: E501


        :return: The owner of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CatalogV3Resource.


        :param owner: The owner of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def projects(self):
        """Gets the projects of this CatalogV3Resource.  # noqa: E501


        :return: The projects of this CatalogV3Resource.  # noqa: E501
        :rtype: object
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this CatalogV3Resource.


        :param projects: The projects of this CatalogV3Resource.  # noqa: E501
        :type: object
        """

        self._projects = projects

    @property
    def publisher(self):
        """Gets the publisher of this CatalogV3Resource.  # noqa: E501


        :return: The publisher of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this CatalogV3Resource.


        :param publisher: The publisher of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def relation(self):
        """Gets the relation of this CatalogV3Resource.  # noqa: E501


        :return: The relation of this CatalogV3Resource.  # noqa: E501
        :rtype: object
        """
        return self._relation

    @relation.setter
    def relation(self, relation):
        """Sets the relation of this CatalogV3Resource.


        :param relation: The relation of this CatalogV3Resource.  # noqa: E501
        :type: object
        """

        self._relation = relation

    @property
    def repo(self):
        """Gets the repo of this CatalogV3Resource.  # noqa: E501


        :return: The repo of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this CatalogV3Resource.


        :param repo: The repo of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._repo = repo

    @property
    def rights(self):
        """Gets the rights of this CatalogV3Resource.  # noqa: E501


        :return: The rights of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this CatalogV3Resource.


        :param rights: The rights of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._rights = rights

    @property
    def source(self):
        """Gets the source of this CatalogV3Resource.  # noqa: E501


        :return: The source of this CatalogV3Resource.  # noqa: E501
        :rtype: list[object]
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CatalogV3Resource.


        :param source: The source of this CatalogV3Resource.  # noqa: E501
        :type: list[object]
        """

        self._source = source

    @property
    def subject(self):
        """Gets the subject of this CatalogV3Resource.  # noqa: E501


        :return: The subject of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CatalogV3Resource.


        :param subject: The subject of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def title(self):
        """Gets the title of this CatalogV3Resource.  # noqa: E501


        :return: The title of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CatalogV3Resource.


        :param title: The title of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this CatalogV3Resource.  # noqa: E501


        :return: The version of this CatalogV3Resource.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CatalogV3Resource.


        :param version: The version of this CatalogV3Resource.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogV3Resource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogV3Resource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogV3Resource):
            return True

        return self.to_dict() != other.to_dict()
