# coding: utf-8

"""
    Catalog Next API.

    This documentation describes the Catalog Next API for all versions and other miscellaneous endpoints.  # noqa: E501

    OpenAPI spec version: 1.16.8+dcs
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from dcs_catalog_client.configuration import Configuration


class CatalogV5(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'books': 'list[str]',
        'branch_or_tag_name': 'str',
        'contents_url': 'str',
        'full_name': 'str',
        'git_trees_url': 'str',
        'id': 'int',
        'ingredients': 'list[object]',
        'language': 'str',
        'language_direction': 'str',
        'language_title': 'str',
        'metadata_api_contents_url': 'str',
        'metadata_json_url': 'str',
        'metadata_url': 'str',
        'metadata_version': 'str',
        'name': 'str',
        'owner': 'str',
        'release': 'Release',
        'released': 'datetime',
        'repo': 'Repository',
        'stage': 'str',
        'subject': 'str',
        'tarbar_url': 'str',
        'title': 'str',
        'url': 'str',
        'zipball_url': 'str'
    }

    attribute_map = {
        'books': 'books',
        'branch_or_tag_name': 'branch_or_tag_name',
        'contents_url': 'contents_url',
        'full_name': 'full_name',
        'git_trees_url': 'git_trees_url',
        'id': 'id',
        'ingredients': 'ingredients',
        'language': 'language',
        'language_direction': 'language_direction',
        'language_title': 'language_title',
        'metadata_api_contents_url': 'metadata_api_contents_url',
        'metadata_json_url': 'metadata_json_url',
        'metadata_url': 'metadata_url',
        'metadata_version': 'metadata_version',
        'name': 'name',
        'owner': 'owner',
        'release': 'release',
        'released': 'released',
        'repo': 'repo',
        'stage': 'stage',
        'subject': 'subject',
        'tarbar_url': 'tarbar_url',
        'title': 'title',
        'url': 'url',
        'zipball_url': 'zipball_url'
    }

    def __init__(self, books=None, branch_or_tag_name=None, contents_url=None, full_name=None, git_trees_url=None, id=None, ingredients=None, language=None, language_direction=None, language_title=None, metadata_api_contents_url=None, metadata_json_url=None, metadata_url=None, metadata_version=None, name=None, owner=None, release=None, released=None, repo=None, stage=None, subject=None, tarbar_url=None, title=None, url=None, zipball_url=None, _configuration=None):  # noqa: E501
        """CatalogV5 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._books = None
        self._branch_or_tag_name = None
        self._contents_url = None
        self._full_name = None
        self._git_trees_url = None
        self._id = None
        self._ingredients = None
        self._language = None
        self._language_direction = None
        self._language_title = None
        self._metadata_api_contents_url = None
        self._metadata_json_url = None
        self._metadata_url = None
        self._metadata_version = None
        self._name = None
        self._owner = None
        self._release = None
        self._released = None
        self._repo = None
        self._stage = None
        self._subject = None
        self._tarbar_url = None
        self._title = None
        self._url = None
        self._zipball_url = None
        self.discriminator = None

        if books is not None:
            self.books = books
        if branch_or_tag_name is not None:
            self.branch_or_tag_name = branch_or_tag_name
        if contents_url is not None:
            self.contents_url = contents_url
        if full_name is not None:
            self.full_name = full_name
        if git_trees_url is not None:
            self.git_trees_url = git_trees_url
        if id is not None:
            self.id = id
        if ingredients is not None:
            self.ingredients = ingredients
        if language is not None:
            self.language = language
        if language_direction is not None:
            self.language_direction = language_direction
        if language_title is not None:
            self.language_title = language_title
        if metadata_api_contents_url is not None:
            self.metadata_api_contents_url = metadata_api_contents_url
        if metadata_json_url is not None:
            self.metadata_json_url = metadata_json_url
        if metadata_url is not None:
            self.metadata_url = metadata_url
        if metadata_version is not None:
            self.metadata_version = metadata_version
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if release is not None:
            self.release = release
        if released is not None:
            self.released = released
        if repo is not None:
            self.repo = repo
        if stage is not None:
            self.stage = stage
        if subject is not None:
            self.subject = subject
        if tarbar_url is not None:
            self.tarbar_url = tarbar_url
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if zipball_url is not None:
            self.zipball_url = zipball_url

    @property
    def books(self):
        """Gets the books of this CatalogV5.  # noqa: E501


        :return: The books of this CatalogV5.  # noqa: E501
        :rtype: list[str]
        """
        return self._books

    @books.setter
    def books(self, books):
        """Sets the books of this CatalogV5.


        :param books: The books of this CatalogV5.  # noqa: E501
        :type: list[str]
        """

        self._books = books

    @property
    def branch_or_tag_name(self):
        """Gets the branch_or_tag_name of this CatalogV5.  # noqa: E501


        :return: The branch_or_tag_name of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._branch_or_tag_name

    @branch_or_tag_name.setter
    def branch_or_tag_name(self, branch_or_tag_name):
        """Sets the branch_or_tag_name of this CatalogV5.


        :param branch_or_tag_name: The branch_or_tag_name of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._branch_or_tag_name = branch_or_tag_name

    @property
    def contents_url(self):
        """Gets the contents_url of this CatalogV5.  # noqa: E501


        :return: The contents_url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._contents_url

    @contents_url.setter
    def contents_url(self, contents_url):
        """Sets the contents_url of this CatalogV5.


        :param contents_url: The contents_url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._contents_url = contents_url

    @property
    def full_name(self):
        """Gets the full_name of this CatalogV5.  # noqa: E501


        :return: The full_name of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CatalogV5.


        :param full_name: The full_name of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def git_trees_url(self):
        """Gets the git_trees_url of this CatalogV5.  # noqa: E501


        :return: The git_trees_url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._git_trees_url

    @git_trees_url.setter
    def git_trees_url(self, git_trees_url):
        """Sets the git_trees_url of this CatalogV5.


        :param git_trees_url: The git_trees_url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._git_trees_url = git_trees_url

    @property
    def id(self):
        """Gets the id of this CatalogV5.  # noqa: E501


        :return: The id of this CatalogV5.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogV5.


        :param id: The id of this CatalogV5.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ingredients(self):
        """Gets the ingredients of this CatalogV5.  # noqa: E501


        :return: The ingredients of this CatalogV5.  # noqa: E501
        :rtype: list[object]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients):
        """Sets the ingredients of this CatalogV5.


        :param ingredients: The ingredients of this CatalogV5.  # noqa: E501
        :type: list[object]
        """

        self._ingredients = ingredients

    @property
    def language(self):
        """Gets the language of this CatalogV5.  # noqa: E501


        :return: The language of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CatalogV5.


        :param language: The language of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def language_direction(self):
        """Gets the language_direction of this CatalogV5.  # noqa: E501


        :return: The language_direction of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._language_direction

    @language_direction.setter
    def language_direction(self, language_direction):
        """Sets the language_direction of this CatalogV5.


        :param language_direction: The language_direction of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._language_direction = language_direction

    @property
    def language_title(self):
        """Gets the language_title of this CatalogV5.  # noqa: E501


        :return: The language_title of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._language_title

    @language_title.setter
    def language_title(self, language_title):
        """Sets the language_title of this CatalogV5.


        :param language_title: The language_title of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._language_title = language_title

    @property
    def metadata_api_contents_url(self):
        """Gets the metadata_api_contents_url of this CatalogV5.  # noqa: E501


        :return: The metadata_api_contents_url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._metadata_api_contents_url

    @metadata_api_contents_url.setter
    def metadata_api_contents_url(self, metadata_api_contents_url):
        """Sets the metadata_api_contents_url of this CatalogV5.


        :param metadata_api_contents_url: The metadata_api_contents_url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._metadata_api_contents_url = metadata_api_contents_url

    @property
    def metadata_json_url(self):
        """Gets the metadata_json_url of this CatalogV5.  # noqa: E501


        :return: The metadata_json_url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._metadata_json_url

    @metadata_json_url.setter
    def metadata_json_url(self, metadata_json_url):
        """Sets the metadata_json_url of this CatalogV5.


        :param metadata_json_url: The metadata_json_url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._metadata_json_url = metadata_json_url

    @property
    def metadata_url(self):
        """Gets the metadata_url of this CatalogV5.  # noqa: E501


        :return: The metadata_url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._metadata_url

    @metadata_url.setter
    def metadata_url(self, metadata_url):
        """Sets the metadata_url of this CatalogV5.


        :param metadata_url: The metadata_url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._metadata_url = metadata_url

    @property
    def metadata_version(self):
        """Gets the metadata_version of this CatalogV5.  # noqa: E501


        :return: The metadata_version of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._metadata_version

    @metadata_version.setter
    def metadata_version(self, metadata_version):
        """Sets the metadata_version of this CatalogV5.


        :param metadata_version: The metadata_version of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._metadata_version = metadata_version

    @property
    def name(self):
        """Gets the name of this CatalogV5.  # noqa: E501


        :return: The name of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogV5.


        :param name: The name of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this CatalogV5.  # noqa: E501


        :return: The owner of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CatalogV5.


        :param owner: The owner of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def release(self):
        """Gets the release of this CatalogV5.  # noqa: E501


        :return: The release of this CatalogV5.  # noqa: E501
        :rtype: Release
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this CatalogV5.


        :param release: The release of this CatalogV5.  # noqa: E501
        :type: Release
        """

        self._release = release

    @property
    def released(self):
        """Gets the released of this CatalogV5.  # noqa: E501


        :return: The released of this CatalogV5.  # noqa: E501
        :rtype: datetime
        """
        return self._released

    @released.setter
    def released(self, released):
        """Sets the released of this CatalogV5.


        :param released: The released of this CatalogV5.  # noqa: E501
        :type: datetime
        """

        self._released = released

    @property
    def repo(self):
        """Gets the repo of this CatalogV5.  # noqa: E501


        :return: The repo of this CatalogV5.  # noqa: E501
        :rtype: Repository
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this CatalogV5.


        :param repo: The repo of this CatalogV5.  # noqa: E501
        :type: Repository
        """

        self._repo = repo

    @property
    def stage(self):
        """Gets the stage of this CatalogV5.  # noqa: E501


        :return: The stage of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this CatalogV5.


        :param stage: The stage of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._stage = stage

    @property
    def subject(self):
        """Gets the subject of this CatalogV5.  # noqa: E501


        :return: The subject of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CatalogV5.


        :param subject: The subject of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def tarbar_url(self):
        """Gets the tarbar_url of this CatalogV5.  # noqa: E501


        :return: The tarbar_url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._tarbar_url

    @tarbar_url.setter
    def tarbar_url(self, tarbar_url):
        """Sets the tarbar_url of this CatalogV5.


        :param tarbar_url: The tarbar_url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._tarbar_url = tarbar_url

    @property
    def title(self):
        """Gets the title of this CatalogV5.  # noqa: E501


        :return: The title of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CatalogV5.


        :param title: The title of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this CatalogV5.  # noqa: E501


        :return: The url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CatalogV5.


        :param url: The url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def zipball_url(self):
        """Gets the zipball_url of this CatalogV5.  # noqa: E501


        :return: The zipball_url of this CatalogV5.  # noqa: E501
        :rtype: str
        """
        return self._zipball_url

    @zipball_url.setter
    def zipball_url(self, zipball_url):
        """Sets the zipball_url of this CatalogV5.


        :param zipball_url: The zipball_url of this CatalogV5.  # noqa: E501
        :type: str
        """

        self._zipball_url = zipball_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CatalogV5, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogV5):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogV5):
            return True

        return self.to_dict() != other.to_dict()
